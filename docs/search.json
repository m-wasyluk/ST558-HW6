[
  {
    "objectID": "HW6.html",
    "href": "HW6.html",
    "title": "HW6",
    "section": "",
    "text": "library(purrr)\nlibrary(httr)\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union"
  },
  {
    "objectID": "HW6.html#task-1",
    "href": "HW6.html#task-1",
    "title": "HW6",
    "section": "Task 1",
    "text": "Task 1\n\nWhat is the purpose of the lapply() function? What is the equivalent purrr function?\n\n\nlapply takes a function and applies it to every element in a list. purrr has map to do the same thing.\n\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n\n\nlapply(my_list, cor, method = “kendall”)\n\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\n\npurrr maintains consistency with the ordering and purpose of its arguments and has type stability\n\n\nWhat is a side-effect function?\n\n\nIt is a function that does something, but in the context of a functional-style programming chain, it doesn’t modify the value that is being passed from function to function.\n\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\n\nThis is due to R’s scoping method where a variable is first searched for in the function environment before progressing outside to the global environment and beyond."
  },
  {
    "objectID": "HW6.html#task-2",
    "href": "HW6.html#task-2",
    "title": "HW6",
    "section": "Task 2",
    "text": "Task 2\nfirst write RMSE function\n\ngetRMSE &lt;- function(responses, predictions, ...){\n  squared_diffs &lt;- (responses - predictions) ^ 2\n  return(sqrt(mean(squared_diffs, ...)))\n}\n\nnow we’ll create some test data for the function\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nand we’ll test it several ways\n\ngetRMSE(resp, pred)\n\n[1] 0.9581677\n\nresp[c(4, 82)] &lt;- NA_real_\n\ngetRMSE(resp, pred)\n\n[1] NA\n\ngetRMSE(resp, pred, na.rm = TRUE)\n\n[1] 0.9451283\n\n\nwe repeat the process for MAE\n\ngetMAE = function(responses, predictions, ...){\n  absolute_diffs &lt;- abs(responses - predictions)\n  return(sqrt(mean(absolute_diffs, ...)))\n}\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\ngetMAE(resp, pred)\n\n[1] 0.9030933\n\nresp[c(13, 54)] &lt;- NA_real_\n\ngetMAE(resp, pred)\n\n[1] NA\n\ngetMAE(resp, pred, na.rm = TRUE)\n\n[1] 0.9044858\n\n\nnow we combine into a wrapper function\n\ngetPredictionMetrics &lt;- function(responses, predictions, modes = c(\"RMSE\", \"MAE\"), ...){\n  \n  if(!is.atomic(responses) || !is.numeric(responses) || !is.atomic(predictions) || !is.numeric(predictions)){\n    stop(\"Either responses or predictions are not an atomic numeric vector\")\n  }\n  \n  results &lt;- map(modes, function(mode){\n    metric_function &lt;- get(paste(c(\"get\", mode), collapse = \"\"))\n    return(metric_function(responses, predictions, ...))\n  })\n  \n  names(results) &lt;- modes\n  \n  return(results)\n}\n\nnow we test as requested\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\ngetPredictionMetrics(resp, pred)\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.9030933\n\ngetPredictionMetrics(resp, pred, modes = c(\"MAE\"))\n\n$MAE\n[1] 0.9030933\n\ngetPredictionMetrics(resp, pred, modes = c(\"RMSE\"))\n\n$RMSE\n[1] 0.9581677\n\nresp[c(34, 67)] &lt;- NA_real_\n\ngetPredictionMetrics(resp, pred)\n\n$RMSE\n[1] NA\n\n$MAE\n[1] NA\n\ngetPredictionMetrics(resp, pred, na.rm = TRUE)\n\n$RMSE\n[1] 0.9620702\n\n$MAE\n[1] 0.9043457\n\n#had to comment out this line because the error was effective\n#getPredictionMetrics(resp, c(\"Hello\", \"this\", \"is\", \"invalid\", \"data\"))"
  },
  {
    "objectID": "HW6.html#task-3",
    "href": "HW6.html#task-3",
    "title": "HW6",
    "section": "Task 3",
    "text": "Task 3\nfirst get and unpack API response\n\nfull_resp &lt;- GET(\"https://newsapi.org/v2/everything\", query = list(q = \"click to cancel\", apiKey = \"675b998446044db1b34cd9f57dcfa261\"))\n\nnews_results &lt;- full_resp$content |&gt; \n  rawToChar() |&gt; \n  fromJSON() |&gt; \n  as_tibble() |&gt; \n  pluck(\"articles\")\n\nnow we package it as a function\n\nget_news_data &lt;- function(search_terms, date_from, key){\n  full_resp &lt;- GET(\"https://newsapi.org/v2/everything\", query = list(q = search_terms, from = date_from, apiKey = key))\n\nreturn(full_resp$content |&gt; \n  rawToChar() |&gt; \n  fromJSON() |&gt;  \n  pluck(\"articles\") |&gt; \n  as_tibble())\n}\n\nlast, we process\n\nohtani_tbl &lt;- get_news_data(\"Shohei Ohtani\", date_from = \"2024-10-01\", key = \"675b998446044db1b34cd9f57dcfa261\")\n\njudge_tbl &lt;- get_news_data(\"Aaron Judge\", date_from = \"2024-10-01\", key = \"675b998446044db1b34cd9f57dcfa261\")\n\nohtani_tbl |&gt; \n  pluck(\"source\", \"name\") |&gt; \n  table()\n\n\n      [Removed]        ABC News        BBC News Bleacher Report      Bunshun.jp \n             13               2               1              10               1 \n     CBS Sports     Daily Beast            ESPN          Forbes      Fox Sports \n              4               1              16               8              24 \n      HYPEBEAST     Japan Today  Jornada.com.mx          kicker KicksOnFire.com \n              2               5               1               1               1 \n          Marca   Minyu-net.com        Newsweek       Predge.jp      Prtimes.jp \n              1               1               3               1               1 \n    Reforma.com   Rolling Stone       Stereogum \n              1               1               1 \n\njudge_tbl |&gt; \n  pluck(\"source\", \"name\") |&gt; \n  table()\n\n\n          [Removed]     Bleacher Report       Boston Herald            BroBible \n                  2                   3                   1                   1 \n         CBS Sports                CNET         Daily Beast                ESPN \n                 14                   1                   2                   9 \n             Forbes          Fox Sports           Gothamist         Japan Today \n                 21                  13                   1                   1 \n     Jornada.com.mx    MLB Trade Rumors       New York Post            Newsweek \n                  1                   1                  16                   2 \n          Pitchfork      Rogerebert.com           SB Nation              SNY.tv \n                  1                   1                   1                   1 \n          Stereogum    The New Republic Yahoo Entertainment \n                  1                   1                   5 \n\nohtani_tbl &lt;- ohtani_tbl |&gt; \n  mutate(publishedAt = ymd_hms(publishedAt)) |&gt; \n  arrange(publishedAt) |&gt; \n  mutate(pub_diff = publishedAt - lag(publishedAt))\n\njudge_tbl &lt;- judge_tbl |&gt; \n  mutate(publishedAt = ymd_hms(publishedAt)) |&gt; \n  arrange(publishedAt) |&gt; \n  mutate(pub_diff = publishedAt - lag(publishedAt))\n\nohtani_tbl |&gt; \n  select(publishedAt, pub_diff) |&gt; \n  map(\\(x) list(mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE), median = median(x, na.rm = TRUE)))\n\n$publishedAt\n$publishedAt$mean\n[1] \"2024-10-08 03:42:32 UTC\"\n\n$publishedAt$sd\n[1] 407581.4\n\n$publishedAt$median\n[1] \"2024-10-07 08:09:23 UTC\"\n\n\n$pub_diff\n$pub_diff$mean\nTime difference of 13121.96 secs\n\n$pub_diff$sd\n[1] 13571.7\n\n$pub_diff$median\nTime difference of 10413 secs"
  }
]